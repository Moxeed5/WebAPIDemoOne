Thoughts//
facts**

End goal of api's, implementing our functions contained in the end points.

Routing-route http request to hit particular end point to run speciifc functions.
//happens through a combo of http verbs and uri (aka /shirts, or /shirts/{id})

Before routing happens, there is authesdfntication and authorization. 

//Model binding - Provide info that is contained in the http request into the function as parameters.
example: in app.MapGet, we pass in a number as a string in the http request as part of the URI. baseURL/shirts/1
the web api frameworks takes that string, and inputs it into the param that accepts an int. 

//Validation - checks what was provided in the api request before passing the data to the end point as an argument 
so in the case of our shirts uri, when we add the ID to the uri as a string, the model validation checks the data
//before changing it to an int and passing it to the function as an arg. 

Authentication & authorization -> routing -> model binding -> model validation -> exception handling -> return data

URI - the end part of the url that refers to and endpoint

end point - get, get, put, post, delete are the end points. Comprised of Http verbs, uri, arrow function, code logic, and return value

http verbs - get get, put post, delete

any web api framework will use a very similar pattern to this so this will be useful to learning GoLang as well. 

//Middleware pipeline describes the architecture of web api with .NET.

Http request comes in, and goes through the pipeline which somewhat resembles a factory assembly line.

Ultimately data is returned as an http response. This response is in answer to the http request. 


//Minimal API vs API with controller. 
Minimal api are for simple scenerios. More complex applications should use controllers.

Controllers are classes that are used to organize the end point methods.

So if we have different methods in our controller class, how do we "map" requests to the correct method in the class?

i.e. if i have a put request and want to update an object, how is that request being mapped to the controller method
that contains the functionality to update an object? 

Answer: You use the app.UseMapControllers() function in your program class. Next, you use the [Route] attribute along with	
the end point url inside of the attribute brackets. Specifiy your HTTP verb above each method. 

//decorate with api controller attribute and derive from Controller base to make web api controller
    //creating methods for each end point within this controller class

Using the Routing lets you point to the correct end point. 

Model Binding - Maps data from http request to params of action method. 

For instance, I need to pass an ID from my http request as a param for updating a shirt. Model binding is what takes
the string ID provided by the request, into the param of my UpdateShirt method as an int arg. To do this, we need to know
where the data (in this example id) is within the request. 

Data can be routed from the route to the param of the action method. I.e. add param to http verb and it routes to param
of action method, aka the method within our controller. You can even use [FromRoute] to specifiy that you want the data
for the param to come from the route. This is for primitive data.

Using the body is for more complex data and typically associated with httppost. 


If postman is not working: Make sure that I've launched the server from the IDE. Aka click play.
//Unsupported media type error: This is likely because the raw body response is NOT set to JSON


Model validation with annotations throw an exception if the data being passed to our controllers is not correctly formatted.
//Ex): Using [Required]. However there are many other annotation types available. ChatGPT this or check microsoft.


So far, we created controllers that return strings. Then we introduced model binding so that we could pass data to our
controllers from the http requets. Http request contained the data that we wanted to pass to the param of our controller method.
Now we'ved used annotations to validate the data being passed. 

We are just returning a string now, however we are passing in objects in our http request from the body. It is easy to see
how once we have passed in objects through the http request, we will do a lot more than just return a string. We will be
able to do whatever we want with the objects. For example if it's a user name, we can iterate through the string and ensure
it doesn't contain curse words. Or call another function that checks if it exists in a db. Just a whole we can do :).
There are attributes that specificies a field is for a credit card num and attributes for a phone number for example. 

As our application grows, we are working with objects rather than just a string saying "Created shirt" "reading shirt" etc.
//We have a shirt model, that we are working with now. So we are returning shirt objects that have mulitple props.
//So our controller methods are returning shirt objects so the return type should be Shirt right? Well no...
//this is because although we are returning a shirt obj, we also need to return a status code for the http request.
//So we are returning a shirt obj and http status code! For returning multiple types with our web api, the return type
should be set to IActionResult. 

POSTMAN: If postman is throwing weird errors, rebuild the solution. Ensure raw type is set to Json. Try returning data 
from body or from form. 

ActionFilterAttributes enable us to abstract the validation logic out of the controller method. So we are no longer checking
if the argument is null in the body of the controller method for example.